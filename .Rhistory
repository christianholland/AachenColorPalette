wrong_queries = tibble(query = colors) %>%
anti_join(rwth_colors, by="query") %>%
pull(query)
warning(paste("The following queries are not available:",
paste(wrong_queries, collapse = ", ")))
}
tibble(query = colors) %>%
inner_join(rwth_colors, by="query") %>%
pull(hex)
}
colors = c("yellow10", "black750", "blkad")
rwth_color(colors)
colors = c("magenta75", "black10", "petrol50")
rwth_color(colors)
tibble(query = colors) %>%
inner_join(rwth_colors, by="query")
rwth_colors %>%
mutate(color = str_to_title(color)) %>%
mutate(color = factor(color, unique(color)),
intensity = factor(intensity, unique(intensity)),
query = factor(query, query)) %>%
ggplot(aes(x=color, y=intensity, color=query)) +
geom_point(size=6) +
scale_color_manual(values = rwth_colors$hex) +
theme_minimal() +
theme(legend.position = "none") +
coord_flip() +
labs(x = "", y="Intensity [%]")
rwth_colors %>%
mutate(color = str_to_title(color)) %>%
mutate(color = factor(color, unique(color)),
intensity = factor(intensity, unique(intensity)),
query = factor(query, query)) %>%
ggplot(aes(x=color, y=intensity, color=query)) +
geom_point(size=6) +
scale_color_manual(values = rwth_colors$hex) +
theme_minimal() +
theme(legend.position = "none") +
coord_flip() +
labs(x = "", y="Intensity [%]") +
ggtitle("RWTH-color palette")
rwth_colors %>%
mutate(color = str_to_title(color)) %>%
mutate(color = factor(color, unique(color)),
intensity = factor(intensity, unique(intensity)),
query = factor(query, query)) %>%
ggplot(aes(x=color, y=intensity, color=query)) +
geom_point(size=6) +
scale_color_manual(values = rwth_colors$hex) +
theme_minimal() +
theme(legend.position = "none") +
coord_flip() +
labs(x = "", y="Intensity [%]") +
ggtitle("RWTH color palette")
rwth_colors %>%
mutate(color = str_to_title(color)) %>%
mutate(color = factor(color, unique(color)),
intensity = factor(intensity, unique(intensity)),
query = factor(query, query)) %>%
ggplot(aes(x=color, y=intensity, color=query)) +
geom_point(size=6) +
scale_color_manual(values = rwth_colors$hex) +
theme_void() +
theme(legend.position = "none") +
coord_flip() +
labs(x = "", y="Intensity [%]") +
ggtitle("RWTH color palette")
rwth_colors %>%
mutate(color = str_to_title(color)) %>%
mutate(color = factor(color, unique(color)),
intensity = factor(intensity, unique(intensity)),
query = factor(query, query)) %>%
ggplot(aes(x=color, y=intensity, color=query)) +
geom_point(size=6) +
scale_color_manual(values = rwth_colors$hex) +
theme_minimal() +
theme(legend.position = "none") +
coord_flip() +
labs(x = "", y="Intensity [%]") +
ggtitle("RWTH color palette")
rwth_colors %>%
mutate(color = str_to_title(color)) %>%
mutate(color = factor(color, unique(color)),
intensity = factor(intensity, unique(intensity)),
query = factor(query, query)) %>%
ggplot(aes(x=color, y=intensity, color=query)) +
geom_point(size=10) +
scale_color_manual(values = rwth_colors$hex) +
theme_minimal() +
theme(legend.position = "none") +
coord_flip() +
labs(x = "", y="Intensity [%]") +
ggtitle("RWTH color palette")
rwth_colors %>%
mutate(color = str_to_title(color)) %>%
mutate(color = factor(color, unique(color)),
intensity = factor(intensity, unique(intensity)),
query = factor(query, query)) %>%
ggplot(aes(x=color, y=intensity, color=query)) +
geom_point(size=8) +
scale_color_manual(values = rwth_colors$hex) +
theme_minimal() +
theme(legend.position = "none") +
coord_flip() +
labs(x = "", y="Intensity [%]") +
ggtitle("RWTH color palette")
devtools::document()
library(myutils)
devtools::document()
library(myutils)
devtools::document()
rwth_colors_df = read_csv("data-raw/rwth_colors.csv") %>%
mutate(query = case_when(intensity == 100 ~ color,
intensity != 100 ~ paste0(color, intensity)))
library(tidyverse)
rwth_colors_df = read_csv("data-raw/rwth_colors.csv") %>%
mutate(query = case_when(intensity == 100 ~ color,
intensity != 100 ~ paste0(color, intensity)))
devtools::use_data(rwth_colors, internal = T, overwrite = T)
rwth_colors_df = read_csv("data-raw/rwth_colors.csv") %>%
mutate(query = case_when(intensity == 100 ~ color,
intensity != 100 ~ paste0(color, intensity)))
devtools::use_data(rwth_colors, internal = T, overwrite = T)
devtools::document()
library(myutils)
load("~/Projects/utils/R/sysdata.rda")
rwth_colors_df = read_csv("data-raw/rwth_colors.csv") %>%
mutate(query = case_when(intensity == 100 ~ color,
intensity != 100 ~ paste0(color, intensity)))
devtools::use_data(rwth_colors_df, internal = T, overwrite = T)
View(rwth_colors)
rm(list=ls())
load("~/Projects/utils/R/sysdata.rda")
library(myutils)
display_rwth_colors()
rwth_color("asdf")
rwth_color("black")
rwth_color("black", "yellow10")
rwth_color(c("black", "yellow10"))
limma_result <- readRDS("~/Projects/Shiny_FUNKY/data/limma_result.rds")
load("~/Projects/utils/data/dorothea_regulon_mouse_v1.rda")
dorothea_regulon_mouse_v1
regulon = dorothea_regulon_mouse_v1
E = limma_result %>% select(gene, logFC, contrast)
E
gene_name = "gene"
value_name = "logFC"
id_name = "contrast"
meta_data = E %>%
select(-c(!!gene_name, !!value_name)) %>%
distinct()
meta_regulon_data = regulon %>%
select(-c(target, mor, likelihood)) %>%
distinct()
emat = E %>%
select(!!gene_name, !!id_name, !!value_name) %>%
spread(!!id_name, !!value_name, fill=0) %>%
na.omit() %>%
data.frame(row.names = 1, stringsAsFactors = F, check.names = F)
regulon %>%
df2regulon()
regulon
regulon = regulon %>% filter(tf == "Adnp")
regulon
df2regulon(regulon)
df = regulon
df
df %>% split(.$target)
df %>% split(.$tf)
regulator_name = "tf"
df %>% split(.[regulator_name])
df %>% split(.[[regulator_name]])
regulator = dat %>% distinct(!!regulator_name) %>% pull()
df %>%
split(.[regulator_name]) %>%
map(function(dat) {
regulator = dat %>% distinct(!!regulator_name) %>% pull()
targets = setNames(dat$mor, dat$target)
likelihood = dat$likelihood
list(tfmode = targets, likelihood = likelihood)
})
df %>%
split(.[regulator_name])
dat = df %>%
split(.[regulator_name])
dat
dat = dat$Adnp
regulator = dat %>% distinct(!!regulator_name) %>% pull()
regulator
dat
dat %>% distinct(tf)
dat %>% distinct(!!regulator_name)
dat %>% distinct(regulator_name)
dat %>% distinct(!!!regulator_name)
regulator = dat %>% distinct(!!regulator_name) %>% pull()
regulator
regulon
df
regulon = df %>%
split(.[regulator_name]) %>%
map(function(dat) {
regulator = dat %>% distinct(!!regulator_name) %>% pull()
targets = setNames(dat$mor, dat$target)
likelihood = dat$likelihood
list(tfmode = targets, likelihood = likelihood)
})
regulon
regulon = dorothea_regulon_mouse_v1
df %>%
split(.[regulator_name]) %>%
map(function(dat) {
regulator = dat %>% distinct(!!regulator_name) %>% pull()
targets = setNames(dat$mor, dat$target)
likelihood = dat$likelihood
list(tfmode = targets, likelihood = likelihood)
})
df = dorothea_regulon_mouse_v1
df %>%
split(.[regulator_name]) %>%
map(function(dat) {
regulator = dat %>% distinct(!!regulator_name) %>% pull()
targets = setNames(dat$mor, dat$target)
likelihood = dat$likelihood
list(tfmode = targets, likelihood = likelihood)
})
regulon
viper_regulon = regulon %>%
df2regulon(regulator_name = regulator_name)
#' Title
#'
#' @param df
#'
#' @return
#' @export
#'
#' @examples
df2regulon = function(df, regulator_name = "tf") {
regulon = df %>%
split(.[regulator_name]) %>%
map(function(dat) {
regulator = dat %>% distinct(!!regulator_name) %>% pull()
targets = setNames(dat$mor, dat$target)
likelihood = dat$likelihood
list(tfmode = targets, likelihood = likelihood)
})
return(regulon)
}
viper_regulon = regulon %>%
df2regulon(regulator_name = regulator_name)
viper_regulon
viper(eset = emat, regulon = viper_regulon, nes = T, method = 'none',
minsize = 4, eset.filter = F, adaptive.size = F) %>%
data.frame(stringsAsFactors = F, check.names = F) %>%
rownames_to_column(var = regulator_name)
library(viper)
viper(eset = emat, regulon = viper_regulon, nes = T, method = 'none',
minsize = 4, eset.filter = F, adaptive.size = F) %>%
data.frame(stringsAsFactors = F, check.names = F) %>%
rownames_to_column(var = regulator_name)
viper(eset = emat, regulon = viper_regulon, nes = T, method = 'none',
minsize = 4, eset.filter = F, adaptive.size = F) %>%
data.frame(stringsAsFactors = F, check.names = F)
activity_scores = viper(eset = emat, regulon = viper_regulon, nes = T, method = 'none',
minsize = 4, eset.filter = F, adaptive.size = F) %>%
data.frame(stringsAsFactors = F, check.names = F)
activity_scores
activity_scores = viper(eset = emat, regulon = viper_regulon, nes = T, method = 'none',
minsize = 4, eset.filter = F, adaptive.size = F) %>%
data.frame(stringsAsFactors = F, check.names = F) %>%
rownames_to_column(var = regulator_name)
activity_scores
viper(eset = emat, regulon = viper_regulon, nes = T, method = 'none',
minsize = 4, eset.filter = F, adaptive.size = F) %>%
data.frame(stringsAsFactors = F, check.names = F) %>%
rownames_to_column(var = regulator_name) %>%
gather(key=!!id_name, value="activity", -!!regulator_name) %>%
as_tibble()
activity_scores = viper(eset = emat, regulon = viper_regulon, nes = T, method = 'none',
minsize = 4, eset.filter = F, adaptive.size = F) %>%
data.frame(stringsAsFactors = F, check.names = F) %>%
rownames_to_column(var = regulator_name) %>%
gather(key=!!id_name, value="activity", -!!regulator_name) %>%
as_tibble() %>%
inner_join(., meta_data, by=id_name) %>%
inner_join(., meta_regulon_data, by = regulator_name)
activity_scores
viper_regulon
r = viper_regulon
res = r %>%
map_df(.f = function(i) {
tf_target = i$tfmode %>%
enframe(name = "target", value="mor") %>%
mutate(likelihood = i$likelihood)
},
.id = regulator_name)
res
regulator_name = "protein"
res = r %>%
map_df(.f = function(i) {
tf_target = i$tfmode %>%
enframe(name = "target", value="mor") %>%
mutate(likelihood = i$likelihood)
},
.id = regulator_name)
res
devtools::document()
library(myutils)
library(myutils)
df <- readRDS("~/Projects/Shiny_FUNKY/data/kinact_regulon_human.rds")
df
regulator_name = "kinase"
regulon = df %>%
split(.[regulator_name]) %>%
map(function(dat) {
regulator = dat %>% distinct(!!regulator_name) %>% pull()
targets = setNames(dat$mor, dat$target)
likelihood = dat$likelihood
list(tfmode = targets, likelihood = likelihood)
})
library(tidyverse)
regulon = df %>%
split(.[regulator_name]) %>%
map(function(dat) {
regulator = dat %>% distinct(!!regulator_name) %>% pull()
targets = setNames(dat$mor, dat$target)
likelihood = dat$likelihood
list(tfmode = targets, likelihood = likelihood)
})
regulon
regulator_name
df
regulon = df %>%
split(.[regulator_name]) %>%
map(function(dat) {
regulator = dat %>% distinct(!!regulator_name, target) %>% pull()
targets = setNames(dat$mor, dat$target)
likelihood = dat$likelihood
list(tfmode = targets, likelihood = likelihood)
})
regulon
df
x = df %>% filter(kinase == "CDK2")
x %>%
split(.[regulator_name])
dat = x %>%
split(.[regulator_name])
regulator = dat %>% distinct(!!regulator_name) %>% pull()
dat = dat$CDK2
regulator = dat %>% distinct(!!regulator_name) %>% pull()
regulator
dat
regulator = dat %>% distinct(!!regulator_name, target)
regulator
regulator = dat %>% distinct(!!regulator_name)
regulator
regulator = dat %>% distinct(!!regulator_name) %>% pull()
targets = setNames(dat$mor, dat$target)
likelihood = dat$likelihood
list(tfmode = targets, likelihood = likelihood)
targets = setNames(dat$mor, dat$target)
likelihood = dat$likelihood
list(tfmode = targets, likelihood = likelihood)
regulon = df %>%
split(.[regulator_name]) %>%
map(function(dat) {
targets = setNames(dat$mor, dat$target)
likelihood = dat$likelihood
list(tfmode = targets, likelihood = likelihood)
})
regulon
devtools::document()
library(myutils)
load("~/Projects/ShinyFUNKI/data/models/dorothea_regulon_human_coverage_v1.rda")
dorothea_regulon_human_coverage_v1
write.csv(dorothea_regulon_human_coverage_v1, "data-raw/dorothea_regulon_human_coverage_v1.csv")
# load annotation file
annotation_mgi_hgnc = read_csv("data-raw/annotation_mgi_hgnc.csv") %>%
na.omit()
library(tidyverse)
dorothea_regulon_human_coverage_v1 %>%
rename(hgnc_symbol = tf)
dorothea_regulon_human_coverage_v1 %>%
rename(hgnc_symbol = tf) %>%
inner_join(annotation_mgi_hgnc, by="hgnc_symbol")
# load annotation file
annotation_mgi_hgnc = read_csv("data-raw/annotation_mgi_hgnc.csv") %>%
na.omit()
dorothea_regulon_human_coverage_v1 %>%
rename(hgnc_symbol = tf) %>%
inner_join(annotation_mgi_hgnc, by="hgnc_symbol")
dorothea_regulon_human_coverage_v1 %>%
rename(hgnc_symbol = tf) %>%
inner_join(annotation_mgi_hgnc, by="hgnc_symbol") %>%
distinct(tf = mgi_symbol, confidence, target, mor, likelihood)
dorothea_regulon_human_coverage_v1 %>%
rename(hgnc_symbol = tf) %>%
inner_join(annotation_mgi_hgnc, by="hgnc_symbol") %>%
distinct(tf = mgi_symbol, confidence, target, mor, likelihood) %>%
rename(hgnc_symbol = target)
dorothea_regulon_human_coverage_v1 %>%
rename(hgnc_symbol = tf) %>%
inner_join(annotation_mgi_hgnc, by="hgnc_symbol") %>%
distinct(tf = mgi_symbol, confidence, target, mor, likelihood) %>%
rename(hgnc_symbol = target) %>%
inner_join(annotation_mgi_hgnc, by="hgnc_symbol") %>%
distinct(tf, confidence, target = mgi_symbol, mor, likelihood)
dorothea_regulon_mouse_coverage_v1 = dorothea_regulon_human_coverage_v1 %>%
rename(hgnc_symbol = tf) %>%
inner_join(annotation_mgi_hgnc, by="hgnc_symbol") %>%
distinct(tf = mgi_symbol, confidence, target, mor, likelihood) %>%
rename(hgnc_symbol = target) %>%
inner_join(annotation_mgi_hgnc, by="hgnc_symbol") %>%
distinct(tf, confidence, target = mgi_symbol, mor, likelihood) %>%
count(tf, target)
dorothea_regulon_mouse_coverage_v1_coverage_v1
dorothea_regulon_mouse_coverage_v1
dorothea_regulon_mouse_coverage_v1 %>% distinct(n)
dorothea_regulon_mouse_coverage_v1 %>% filter(n == 2)
dorothea_regulon_mouse_coverage_v1 %>% filter(n == 3)
dorothea_regulon_mouse_coverage_v1 %>% filter(tf == "Ar" & target == "Ugt2b1")
x = dorothea_regulon_human_coverage_v1 %>%
rename(hgnc_symbol = tf) %>%
inner_join(annotation_mgi_hgnc, by="hgnc_symbol") %>%
distinct(tf = mgi_symbol, confidence, target, mor, likelihood) %>%
rename(hgnc_symbol = target) %>%
inner_join(annotation_mgi_hgnc, by="hgnc_symbol") %>%
distinct(tf, confidence, target = mgi_symbol, mor, likelihood)
x %>% filter(tf == "Ar" & target == "Ugt2b1")
annotation_mgi_hgnc %>% filter(mgi_symbol == "Ugt2b1")
x = dorothea_regulon_human_coverage_v1 %>%
rename(hgnc_symbol = tf) %>%
inner_join(annotation_mgi_hgnc, by="hgnc_symbol") %>%
distinct(tf = mgi_symbol, confidence, target, mor, likelihood) %>%
rename(hgnc_symbol = target) %>%
inner_join(annotation_mgi_hgnc, by="hgnc_symbol") %>%
distinct(tf, confidence, target = mgi_symbol, mor, likelihood) %>%
group_by(tf, target) %>%
filter(confidence == max(confidence)) %>%
ungroup()
x
x %>% count(tf, target) %>% distinct(n)
x %>% count(tf, target) %>% filter(n == 2)
x %>% filter(tf == "Zfp729a" & target == "Cept1")
x = dorothea_regulon_human_coverage_v1 %>%
rename(hgnc_symbol = tf) %>%
inner_join(annotation_mgi_hgnc, by="hgnc_symbol") %>%
distinct(tf = mgi_symbol, confidence, target, mor, likelihood) %>%
rename(hgnc_symbol = target) %>%
inner_join(annotation_mgi_hgnc, by="hgnc_symbol") %>%
distinct(tf, confidence, target = mgi_symbol, mor, likelihood) %>%
group_by(tf, target) %>%
filter(confidence == max(confidence)) %>%
filter(mor = max(mor)) %>%
ungroup() %>%
select(tf, confidence, target, mor, likelihood)
x = dorothea_regulon_human_coverage_v1 %>%
rename(hgnc_symbol = tf) %>%
inner_join(annotation_mgi_hgnc, by="hgnc_symbol") %>%
distinct(tf = mgi_symbol, confidence, target, mor, likelihood) %>%
rename(hgnc_symbol = target) %>%
inner_join(annotation_mgi_hgnc, by="hgnc_symbol") %>%
distinct(tf, confidence, target = mgi_symbol, mor, likelihood) %>%
group_by(tf, target) %>%
filter(confidence == max(confidence)) %>%
filter(mor == max(mor)) %>%
ungroup() %>%
select(tf, confidence, target, mor, likelihood)
x
x %>% count(tf, target) %>% distinct(n)
dorothea_regulon_human_coverage_v1
devtools::use_data(dorothea_regulon_human_coverage_v1)
?use_data
devtools::use_data(dorothea_regulon_mouse_coverage_v1)
rwth_colors_df
?anti_join
??anti_join
library(dplyr)
install.packages(c("dplyr", "tibble", "ggplot2"))
remove.packages(c("askpass", "brew", "callr", "clipr", "clisymbols", "commonmark", "covr", "crosstalk", "curl", "desc", "devtools", "DT", "evaluate", "fastmap", "fs", "gh", "git2r", "htmltools", "htmlwidgets", "httpuv", "httr", "ini", "jsonlite", "later", "memoise", "mime", "openssl", "pkgbuild", "pkgload", "praise", "prettyunits", "processx", "promises", "ps", "rcmdcheck", "remotes", "rex", "roxygen2", "rprojroot", "rstudioapi", "rversions", "sessioninfo", "shiny", "sourcetools", "sys", "testthat", "usethis", "whisker", "xml2", "xopen", "xtable", "yaml"))
library(devtools)
install.packages("devtools")
install.package("devtools")
install.packages("devtools")
devtools::install_github("r-lib/devtools")
install.packages("devtools")
devtools::load_all(".")
devtools::document()
library(RWTHColorPalette)
devtools::document()
library(RWTHColorPalette)
display_rwth_colors()
library(dplyr)
display_rwth_colors()
devtools::document()
library(RWTHColorPalette)
library(RWTHColorPalette)
display_rwth_colors()
library(RWTHColorPalette)
detach(RWTHColorPalette)
detach("package:RWTHColorPalette", unload = TRUE)
library(RWTHColorPalette)
display_rwth_colors()
devtools::document()
devtools::document()
library(RWTHColorPalette)
display_rwth_colors()
?display_rwth_colors
?rwth_colors
?rwth_color
rwth_color(c("blue", "blue75", "blue50", "blue25"))
rwth_color(c("blue", "blue75", "blue50", "blue25", "blue10"))
library(RWTHColorPalette)
